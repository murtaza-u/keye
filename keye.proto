syntax = "proto3";

package keye;

option go_package = "github.com/murtaza-u/keye";

// Service Api consists of GET, PUT, DEL and WATCH RPC methods.
// Alongside the fundamental key/value arguments, these RPC methods can
// accept optional configuration parameters, allowing for a convenient
// and intuitive client API.
service Api {
  rpc Get(GetParams) returns (GetResponse);
  rpc Put(PutParams) returns (PutResponse);
  rpc Del(DelParams) returns (DelResponse);
  rpc Watch(WatchParams) returns (stream WatchResponse);
}

message KV {
  string key = 1;
  bytes val = 2;
}

message GetParams {
  string key = 1;
  optional GetOpts opts = 2;
}

message GetOpts {
  bool regex = 1;
  bool keys_only = 2;
}

message GetResponse {
  repeated KV kvs = 1;
}

message PutParams {
  string key = 1;
  bytes val = 2;
  optional PutOpts opts = 3;
}

message PutOpts {
  bool regex = 1;
}

message PutResponse {
  repeated string keys = 1;
}

message DelParams {
  string key = 1;
  optional DelOpts opts = 2;
}

message DelOpts {
  bool regex = 1;
}

message DelResponse {
  repeated string keys = 1;
}

message WatchParams {
  string key = 1;
  optional WatchOpts opts = 2;
}

message WatchOpts {
  bool regex = 1;
}

message WatchResponse {
  Event event = 1;
  repeated KV kvs = 2;
}

enum Event {
  EVENT_KEEPALIVE = 0;
  EVENT_ADDED = 1;
  EVENT_MODIFIED = 2;
  EVENT_DELETED = 3;
}
